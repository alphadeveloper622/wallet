name: Update Protected Branch
description: Create, approve, and merge a pull request against a protected branch

inputs:
  TARGET_BRANCH:
    description: The target branch to update. This becomes the base branch of the pull request.
    required: true
  SOURCE_BRANCH:
    description: If updating main, you must also provide a head branch to update main with.
    required: false
    default: ''
  OS_BOTIFY_TOKEN:
    description: GitHub token for OSBotify
    required: true
  GPG_PASSPHRASE:
    description: Passphrase used to decrypt GPG key for OSBotify
    required: true

runs:
  using: composite
  steps:
    - name: Validate target branch
      if: ${{ !contains(fromJSON('["main", "staging", "production"]'), inputs.TARGET_BRANCH) }}
      shell: bash
      run: |
        echo "Target branch must be one of ['main', 'staging', 'production]"
        exit 1

    # If updating main, SOURCE_BRANCH must not be empty
    - name: Validate source branch
      if: inputs.TARGET_BRANCH == 'main' && inputs.SOURCE_BRANCH == ''
      shell: bash
      run: |
        echo "Cannot update main branch without specifying a source branch"
        exit 1

    # If updating staging, the source branch will always be main
    # If updating production, the source branch will always be staging
    - name: Set source branch
      shell: bash
      run: |
        if [[ ${{ inputs.TARGET_BRANCH }} == 'staging' ]]; then
          echo "SOURCE_BRANCH=main" >> "$GITHUB_ENV"
        elif [[ ${{ inputs.TARGET_BRANCH }} == 'production' ]]; then
          echo "SOURCE_BRANCH=staging" >> "$GITHUB_ENV"
        else
          echo "SOURCE_BRANCH=${{ inputs.SOURCE_BRANCH }}" >> "$GITHUB_ENV"
        fi

    - uses: actions/checkout@v3
      with:
        ref: ${{ env.SOURCE_BRANCH }}
        token: ${{ inputs.OS_BOTIFY_TOKEN }}

    - uses: Expensify/App/.github/actions/composite/setupGitForOSBotify@main
      with:
        GPG_PASSPHRASE: ${{ inputs.GPG_PASSPHRASE }}

    - name: Update target and source branches
      shell: bash
      run: |
        git fetch ${{ inputs.TARGET_BRANCH }} ${{ env.SOURCE_BRANCH }}
        git checkout ${{ env.SOURCE_BRANCH }}
        git merge origin/${{ env.SOURCE_BRANCH }}

    - name: Set New Version
      shell: bash
      run: echo "NEW_VERSION=$(npm run print-version --silent)" >> "$GITHUB_ENV"

    - name: Update target branch
      shell: bash
      run: |
        echo "Updating ${{ inputs.TARGET_BRANCH }} from ${{ env.SOURCE_BRANCH }}"
        if [[ ${{ inputs.TARGET_BRANCH }} == 'staging' || ${{ inputs.TARGET_BRANCH } == 'production' ]]; then
          git branch -D ${{ inputs.TARGET_BRANCH }}
          git checkout -b ${{ inputs.TARGET_BRANCH }}
        else
          # Validate Changed files
          if [[ "$(git diff main --name-only --diff-filter=M | tr '\n' ' ')" != 'android/app/build.gradle ios/NewExpensify/Info.plist ios/NewExpensifyTests/Info.plist package-lock.json package.json ' ]]; then
            echo "Detected unexpected file changes updating main"
            exit 1
          elif [[ "$(git diff main --name-only --diff-filter=AD)" != '' ]]; then
            echo "Detected unexpected file changes updating main"
            exit 1
          fi

          git checkout ${{ inputs.TARGET_BRANCH }}
          git merge ${{ env.SOURCE_BRANCH }}
        fi

    - name: Force-push change to protected branch
      shell: bash
      run: git push --force origin ${{ inputs.TARGET_BRANCH }}
